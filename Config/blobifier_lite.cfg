##########################################################################################

# Sample config to be used in conjunction with Blobifier Outdoor Bucket & Nozzle 
# Scrubber mod. Created by Dendrowen (dendrowen on Discord) and modified by G.Neu to purge on the bed.
# The Macro is based on a version, and Nozzle Scrubber is made by Hernsl (hernsl#8860 on Discord).
# The device is designed around a Voron V2.4 350mm, but should work for 250mm and 350mm too. This 
# version only supports the assembly on the rear-left of the bed. If you decide to change 
# that, please consider contributing to the project by creating a pull request with the 
# needed changes.

# IMPORTANT: The rear-left part of your bed becomes unusable by this mod because the 
#            toolhead needs to lower down to 0. Be sure not to use the left-rear 130x45mm.

# The goals of this combination of devices is to dispose of purged filament during a 
# multicolored print without the need of a purge block and without the flurries of
# filament poops consuming your entire 3D printer room. The Blobifier achieves that by
# purging onto the bed which causes the filament to turn into a tiny blob 
# rather then a large spiral. This keeps the waste relativly small. The bucket should be
# able to account for up to 800 filament swaps.

# Upload this file to your klipper config directory and include it in printer.cfg
# [include blobifier_lite.cfg]

# It is advised to use the start_gcode from Happy Hare. Then you will be able to fully 
# and efficiently use this mod. Check the Happy Hare document at gcode_preprocessing.md 
# in the Happy Hare github for more details.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the emergency stop.

##########################################################################################

##########################################################################################
# Main macro. Usually you should only need to call this one or place it in the Happy Hare
# _MMU_POST_LOAD macro or variable_user_post_load_extension:
# PURGE_LENGTH=[float] (optional) The length to purge. If ommited it will check the 
#                      purge_volumes matrix or variable_purge_length
#
[include purge_volume.cfg]

[gcode_macro BLOBIFIER]
# These parameters define your filament purging. The retract variable is used to retract 
# right after purging to prevent unnecessary oozing. Some filament are particularly oozy 
# and may continue to ooze out of the nozzle for a second or two after retracting. Update 
# as necessary.
variable_purge_spd:                      400    # Speed, in mm/min, of the purge.
variable_purge_temp_min:                 200    # Minimum nozzle purge temperature.
variable_retract_before_park:              7.0  # amount in mm. 0 to disable
variable_retract_speed:                 2000    # mm/m
variable_unretract_after_clean_modifier: -1.5          #  GNEU Add

# Adjust this so that your nozzle scrubs within the brush. Be careful not to go too low! 
# Start out with a high value (like, 6) and go 
# down from there.
variable_brush_top:                        0.6

# These parameters define your scrubbing, travel speeds, safe z clearance and how many 
# times you want to wipe. Update as necessary.
variable_clearance_z:                      2    # When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:                         2    # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_travel_spd_xy:                10000    # Travel (not cleaning) speed along x and y-axis in mm/min.
variable_blob_kick_spd:                25000    # speed at which the blob will kicked off 
variable_travel_spd_z:                  1000    # Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:                  20000    # Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference 
# is provided below.
# 
#                  ?   brush_width   ?                            
#                   _________________                                                          
#                  |                 |  ?                Y position is acquired from your 
#  brush_start (x) |                 | brush_depth       stepper_y position_max. Adjust 
#                  |_________________|  ?                your brush physically in Y so 
#                          (y)                           that the nozzle scrubs within the 
#                      brush_front                       brush.                                              
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
# Start location of the brush. Defaults for 250, 300 and 350mm are provided below. 
# Uncomment as necessary
# The brush will move diagonally through teh brush.
#    from (brush_start,brush_min_y) to (brush_start + brush_width, Y max)
#variable_brush_start:                    34    # For 250mm build    
#variable_brush_start:                    83.5  # For 300mm build
variable_brush_start:                     37.5   #43.5   #82    # for 350mm build    GNEU
variable_brush_min_y:                    353    # Minimum position in Y of the brush. 
variable_brush_width:                     32    # width of the brush
variable_position_wiper:                  85.5  # mid point of the wiper

# Location of where to purge. The tray is 15mm in length, so if you assemble it against 
# the side of the bed (default), 10mm is a good location
variable_purge_x:                          5.5  # 8.5   Gneu bed 
variable_purge_y:                        344    # Gneu add


# Height of the tray. If it's below your bed, give this a negative number equal to the 
# difference. If it's above your bed, give it a positive number. You can find this number 
# by homing, optional QGL or equivalent, and moving you toolhead above the tray, and 
# lowering it with the paper method. 
variable_tray_top:                         0.5  # Gneu bed
 

# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# The following section defines how the purging sequence is executed. This is where you 
# tune the purging to create pretty blobs. Refer to the visual reference for a better 
# understanding. The visual is populated with example values. Below are some guides 
# provided to help with tuning.
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < End of third iteration.
#                                / \                                  HEIGHT:   3 x iteration_z_raise - (2 + 1) x iteration_z_change  (3 x 5 - 2 x 1.2 = 11.4)
#                               |   |                                 EXTRUDED: 3 x max_iteration_length                              (3 x 50 = 150)
#                              /     \          ______________  < End of second iteration.
#                             |       \                               HEIGHT:   2 x iteration_z_raise - 1 x iteration_z_change        (2 x 5 - 1 x 1.2 = 8.8)
#                            /         |                              EXTRUDED: 2 x max_iteration_length                              (2 x 50 = 100)
#                           |           \       ______________  < End of first iteration. 
#                          /             \                            HEIGHT:   1 x iteration_z_raise                                 (1 x 5 = 5)
#                         |               |                           EXTRUDED: 1 x max_iteration_length                              (1 x 50 = 50)
#___________               \             /      ______________  < Start height of the nozzle. default value: 1.5mm
#           |_______________\___________/_      ______________  < Bottom of the tray
#           |_____________________________|
#           |
# 
########################### BLOB TUNING ##############################
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Incr. purge start          |
# |    initial purge (first few mm)     |                            |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under     | Incr. temperature          |
# |  the nozzle at the first iteration  | Decr. iteration_z_raise    |
# |                                     | Incr. max_iteration_length |
# +-------------------------------------+----------------------------+
# |  Filament scoots out from under the | Decr. purge_spd            |
# |  the nozzle at later iterations     | Incr. iteration_z_change   |
# +-------------------------------------+----------------------------+
# |  Filament sticks to the nozzle at   | Decr. iteration_z_change   |
# |         later iterations            |                            |
# +-------------------------------------+----------------------------+
# |        I think my blobs can         | Balsy... Increase          |
# |          be much bigger!            | max_iterations_per_blob    |
# +-------------------------------------+----------------------------+
#

# The height to raise the nozzle above the tray before purging. This allows any built up 
# pressure to escape before the purge.
variable_purge_start:                             0.6

# The maximum mm of filament (length) to extrude one iteration. A blob contains multiple 
# iterations
variable_max_iteration_length:                   50

# The amount to raise Z for each iteration
variable_iteration_z_raise:                       5

# As the nozzle gets higher and the blob wider, the Z raise needs to be reduced.
variable_iteration_z_change:                      0.8

# Maximum iterations per blob. 3 Should be sufficient for most flushes. If not, Blobifier 
# will create multiple blobs for a single purge.
variable_max_iterations_per_blob:                 3

# Lift the nozzle slightly after creating the blob te release pressure on the tray.
variable_eject_hop:                               2.0

# Dwell time (ms) after purging and before cleaning to relieve pressure from the nozzle.
variable_pressure_release_time:                1000
variable_blob_cooling_time:                    1000  # time to cool down the blob before kicking it off of the bed fore hte next blob

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan:                      -1  # Leave it unchanged
#variable_part_cooling_fan:                       0  # Disable the fan
variable_part_cooling_fan:                        1  # Run it at full speed


# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length:                          80

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum:                  40  

# The slicer values often are a bit too wastefull. Tune it here to get optimal values. 0.6
# is a good starting point.
variable_purge_length_modifier:                  1.0   # GNEU 0.8

# Length of filament to add after the purge volume. Purge volumes don't always take 
# cutters into account and therefor a swap from red to white might be long enough, but 
# from white to red can be far too short. When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition:                 15   # GNEU 40


gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_state
  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}    
    RESPOND MSG="BLOBIFIER: Not homed! Home xyz before blobbing"
			 
  
  # {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}   
  #   RESPOND MSG="BLOBIFIER: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}
    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = printer.fan.speed %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    #{% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set restore_z = [printer['gcode_macro BLOBIFIER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    
    {% set position_y = pos_max.y %}
    {% set ttgmap = printer.mmu.ttg_map %}
    {% set from_gate = ttgmap[from_tool] %}
    {% set to_gate = ttgmap[to_tool] %}
    M118 TTG Map = {ttgmap}
    M118 From gate {from_gate} (T{from_tool}) to gate {to_gate} (T{to_tool})
   
    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/blob/variables/doc/gcode_preprocessing.md)
    #{% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
    {% set pv = printer['gcode_macro _PURGE_VOLUMES']['purge_volumes'] %}
    {% set max_gates = printer.configfile.settings.mmu.mmu_num_gates|int %}
    {% set line = 0 %}
    {% set ns = namespace(puvol=0.0|float) %}
    
    # M118 purge volulme from printer vars = {pv}          
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================
    {% set purge_vol = 0 %}
    {% if params.PURGE_LENGTH %} # ======= PARAM PURGE LENGTH ==============================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_gate == to_gate and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER: Gate didn't change (G%s > G%s), %s" % (from_gate, to_gate, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}
    {% elif pv %} # ====================== FECTH FROM SLICER ===============================
      {% if from_tool < 0 and to_gate >= 0%}
        {action_respond_info("BLOBIFIER: from tool unknown. Finding largest value for T? > G%d" % to_gate)}
        # {% set purge_vol = pv|map(attribute=to_gate|string)|max %}
        {% for line in range(max_gates) %}
           {% if ns.puvol < pv[line|string][to_gate|string].purge_volume|float %}
              {% set ns.puvol = pv[line|string][to_gate|string].purge_volume|float %}
           #{% purge_vol = pv[line|string][to_gate|string]|float %}
           {% endif %} 
          #{ action_respond_info( "gate max =  %s %s %s " % ( line, to_gate, ns.puvol ) ) } 
        {% endfor %} 
        {% set purge_vol = ns.puvol %}
        { action_respond_info( "gate %s max =  %.2fmm³ " % ( to_gate, purge_vol ) ) }
      
      {% else %}
        #{% set purge_vol = pv[from_gate][to_gate]|float * purge_length_modifier %}
        {% set purge_vol = pv[from_gate|string][to_gate|string].purge_volume|float * purge_length_modifier %}
        #purge_volumes[fgate][tgate].purge_volume
        {action_respond_info("BLOBIFIER: Swapped G%s > G%s" % (from_gate, to_gate))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section + purge_length_addition %}
    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float %}
    {% endif %}

    {action_respond_info("BLOBIFIER: Purging %.2fmm³ of filament" % (purge_vol|float))}
	# M118 Purge volume = {purge_vol}		 
    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("BLOBIFIER: Purging %.2fmm of filament" % (purge_len|float))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}

      # ====================================================================================
      # ==================== POSITIONING ===================================================
      # ====================================================================================
      
      # Move to the assembly, first a bit more to the right (brush_start) to avoid a 
      # potential filametrix pin if it's not already on the same Y coordinate.
           
      # Move over to the tray
      G1 Z{tray_top + purge_start} F{travel_spd_z}
      G1 X{purge_x} F{blob_kick_spd}
      G1 Y{purge_y} F{travel_spd_xy}
      
      # Check if the mmu servo is in correct position
      {% if printer.mmu is defined and printer.mmu.enabled %}
         {% if printer.configfile.config.mmu.sync_to_extruder %}
           MMU_SYNC_GEAR_MOTOR SYNC=1
         {% else %}
           MMU_SERVO POS=up
         {% endif %}
      {% endif %}
			   

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min-2}
          # TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}-2
        {% endif %}
      {% endif %}
			   

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}
      {% if iterations > 3 %}
         {% set max_iteration_length = purge_len / iterations|int %}
      {% endif %}
      #G1 E{retract_before_park} F{retract_speed}  # GNEU add
      # Repeat the process until purge_len is reached
      {% for n in range(iterations) %}
      
        # Calculate current iteration in current blob
        {% set step = n % max_iterations_per_blob %}

        {% if step == 0 %}
          G1 Z{tray_top + purge_start} F{travel_spd_z}
        {% endif %}

        # Determine the amount to extrude. Either the remaining purge_len or 
        # max_iteration_length.
        {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
        {% set extrude_amount = [purge_amount_left,max_iteration_length]|min %}
        {% set extrude_ratio = extrude_amount / max_iteration_length %}

        # relative positioning
        G91 
        M83

        # Calculate the amount z has to be raised
        # If step equals 0, the start position of the nozzle is already a little higher.
        {% set step_triangular = step * (step + 1) / 2 %}
        {% set z_raise_substract = purge_start if step == 0 else 
          step_triangular * iteration_z_change %}
        {% set raise_z = (iteration_z_raise - z_raise_substract) * extrude_ratio %}

        # make sure raise_z never goes negative, dropping the nozzle while purging.
        {% set raise_z = [raise_z,0]|max %}

        # Calculate the raise speed based on the purge speed.
        {% set duration = extrude_amount / purge_spd %} 
        {% set speed = raise_z / duration %}
      
        # Purge one iteration
        G1 Z{raise_z} E{extrude_amount} F{speed}

        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================
        {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
        {% set purge_length_reached = purge_len - max_iteration_length * (n+1) <= 0 %}
        {% if max_iterations_reached or purge_length_reached %}
          # Raise z a bit to relieve pressure on the blob preventing it to go sideways
          G1 E-{retract_before_park} F{retract_speed}      
          G1 Z{eject_hop + 2} F{travel_spd_z}              
		  G90                                              # absolute positioning 
	      G1 X{brush_start} Y{brush_min_y} F{travel_spd_xy}            													   
		  # Look if more blobs are needed, if yes wait and kick the blob
          {% if not purge_length_reached %}
            G4 P{blob_cooling_time} 
            G90
            G1 Z{tray_top + purge_start} F{travel_spd_z}
            G1 Y{position_y} F{travel_spd_xy}
            G1 X{purge_x} F{blob_kick_spd}
            G1 Y{purge_y} F{travel_spd_xy}
          {% endif %}
        {% endif %}
      {% endfor %}
    {% endif %}
    
    MMU_SERVO POS=up
    
    BLOBIFIER_CLEAN
				 
    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================

    # G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 

##########################################################################################
# Wipes the nozzle on the brass brush
#
[gcode_macro BLOBIFIER_CLEAN]
variable_retract_before_print: 0.0
gcode:
  {% set bb = printer['gcode_macro BLOBIFIER'] %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  # Position for wipe. Either left or right of brush based off bucket_pos to avoid 
  # unnecessary travel.
  SAVE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state

  G90

  G1 X{bb.brush_start} Y{bb.brush_min_y} F{bb.travel_spd_xy}
     
  # Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
  {% for wipes in range(1, (bb.wipe_qty + 1)) %}
     G1 X{bb.brush_start + bb.brush_width} Y{position_y} F{bb.wipe_spd_xy}        
     G1 X{bb.brush_start} Y{bb.brush_min_y} F{bb.wipe_spd_xy}                       
  {% endfor %}
  #Move to middle of wiper 
    #G1 X{bb.brush_start + bb.brush_width/2} Y{position_y} F{bb.wipe_spd_xy} 
  G1 Y{position_y} F{bb.wipe_spd_xy} 
  G1 X{bb.position_wiper} F{bb.wipe_spd_xy}
  #G1 E-{retract_before_print} F{bb.retract_speed}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state


##########################################################################################
# Park the nozzle on the tray to prevent oozing during filament swaps. Place this 
# extension in the pre-unload extension in mmu_macro_vars.cfg:
#   variable_user_pre_unload_extension: "BLOBIFIER_PARK"
#
[gcode_macro BLOBIFIER_PARK]
variable_restore_z: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_kick = pos_max.y%}
  {% set position_y = bl.purge_y %}

  SET_GCODE_VARIABLE MACRO=BLOBIFIER_PARK VARIABLE=restore_z VALUE={pos.z}

  SAVE_GCODE_STATE NAME=blobifier_park_state
  
  {% if "xyz" in printer.toolhead.homed_axes and printer.quad_gantry_level and printer.quad_gantry_level.applied %} 
    G90

    G1 E-{bl.retract_before_park} F{bl.retract_speed}
    G1 X{bl.brush_start +8} Y{position_kick} F{bl.travel_spd_xy}
    G1 Z{bl.tray_top} F{bl.travel_spd_z}
    G1 X{bl.purge_x} G1 Y{position_y} F{bl.blob_kick_spd} 
   
  {% else %}
    RESPOND MSG="Please home (and QGL) before parking"
		   
  {% endif %}
					 
  RESTORE_GCODE_STATE NAME=blobifier_park_state







